{"ast":null,"code":"var _jsxFileName = \"/Users/benjabarreiro/Documents/Notas-CursoReact/react-ts/src/components/NewToDo.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useRef } from \"react\";\nimport { TodosContext } from \"../store/todos-context\";\nimport classes from \"./NewToDo.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewToDo = () => {\n  _s();\n\n  const {\n    addTodo\n  } = useContext(TodosContext);\n  const todoTextInputRef = useRef(null);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const enteredText = todoTextInputRef.current.value; // If you know that the ref is  set to a value when we use it you write --> current!.value. Basically you're 100% that the value can't be null\n    //if the ref is not necesarily set to a value when we use it you write --> current?.value\n\n    if ((enteredText === null || enteredText === void 0 ? void 0 : enteredText.trim().length) === 0) {\n      // throw error\n      return;\n    }\n\n    addTodo(enteredText);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"text\",\n      children: \"To Do Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: todoTextInputRef,\n      type: \"text\",\n      id: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add To Do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewToDo, \"BmC77ENawf9cvHw1r/F/8BteAf8=\");\n\n_c = NewToDo;\nexport default NewToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewToDo\");","map":{"version":3,"sources":["/Users/benjabarreiro/Documents/Notas-CursoReact/react-ts/src/components/NewToDo.tsx"],"names":["useContext","useRef","TodosContext","classes","NewToDo","addTodo","todoTextInputRef","submitHandler","e","preventDefault","enteredText","current","value","trim","length","form"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,OAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAcL,UAAU,CAACE,YAAD,CAA9B;AACA,QAAMI,gBAAgB,GAAGL,MAAM,CAAmB,IAAnB,CAA/B;;AACA,QAAMM,aAAa,GAAIC,CAAD,IAAwB;AAC5CA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,WAAW,GAAGJ,gBAAgB,CAACK,OAAjB,CAA0BC,KAA9C,CAH4C,CAI5C;AACA;;AAEA,QAAI,CAAAF,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEG,IAAb,GAAoBC,MAApB,MAA+B,CAAnC,EAAsC;AACpC;AACA;AACD;;AAEDT,IAAAA,OAAO,CAACK,WAAD,CAAP;AACD,GAbD;;AAcA,sBACE;AAAM,IAAA,SAAS,EAAEP,OAAO,CAACY,IAAzB;AAA+B,IAAA,QAAQ,EAAER,aAAzC;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,GAAG,EAAED,gBAAZ;AAA8B,MAAA,IAAI,EAAC,MAAnC;AAA0C,MAAA,EAAE,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAxBD;;GAAMF,O;;KAAAA,O;AA0BN,eAAeA,OAAf","sourcesContent":["import { useContext, useRef } from \"react\";\nimport { TodosContext } from \"../store/todos-context\";\nimport classes from \"./NewToDo.module.css\";\n\nconst NewToDo: React.FC = () => {\n  const { addTodo } = useContext(TodosContext);\n  const todoTextInputRef = useRef<HTMLInputElement>(null);\n  const submitHandler = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const enteredText = todoTextInputRef.current!.value;\n    // If you know that the ref is  set to a value when we use it you write --> current!.value. Basically you're 100% that the value can't be null\n    //if the ref is not necesarily set to a value when we use it you write --> current?.value\n\n    if (enteredText?.trim().length === 0) {\n      // throw error\n      return;\n    }\n\n    addTodo(enteredText);\n  };\n  return (\n    <form className={classes.form} onSubmit={submitHandler}>\n      <label htmlFor=\"text\">To Do Text</label>\n      <input ref={todoTextInputRef} type=\"text\" id=\"text\" />\n      <button>Add To Do</button>\n    </form>\n  );\n};\n\nexport default NewToDo;\n"]},"metadata":{},"sourceType":"module"}