{"ast":null,"code":"var _jsxFileName = \"/Users/benjabarreiro/Documents/Notas-CursoReact/http-req/src/App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const res = await fetch(\"https://react-http-udemy-68c21-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!res.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await res.json();\n      const transformedMovies = data.map(movieData => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      }));\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const addMovieHandler = async movie => {\n    try {\n      const res = await fetch(\"https://react-http-udemy-68c21-default-rtdb.firebaseio.com/movies.json\", {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        header: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await res.json();\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"Found no movies\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\"), /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benjabarreiro/Documents/Notas-CursoReact/http-req/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","res","fetch","ok","Error","data","json","transformedMovies","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","addMovieHandler","movie","method","body","JSON","stringify","header","console","log","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(\n        \"https://react-http-udemy-68c21-default-rtdb.firebaseio.com/movies.json\"\n      );\n\n      if (!res.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await res.json();\n\n      const transformedMovies = data.map((movieData) => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      }));\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const addMovieHandler = async (movie) => {\n    try {\n      const res = await fetch(\n        \"https://react-http-udemy-68c21-default-rtdb.firebaseio.com/movies.json\",\n        {\n          method: \"POST\",\n          body: JSON.stringify(movie),\n          header: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      const data = await res.json();\n      console.log(data)\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  let content = <p>Found no movies</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}