{"ast":null,"code":"var _jsxFileName = \"/Users/benjabarreiro/Documents/Notas-CursoReact/authentication-react/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n};\n\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; // !! (not not) --> converts a falsey value to a true one\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\", token);\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/benjabarreiro/Documents/Notas-CursoReact/authentication-react/src/store/auth-context.js"],"names":["createContext","useState","logoutTimer","AuthContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","AuthContextProvider","children","initialToken","setToken","userIsLoggedIn","logoutHandler","removeItem","clearTimeout","loginHandler","setItem","remainingTime","setTimeout","contextValue"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,WAAW,gBAAGH,aAAa,CAAC;AAChCI,EAAAA,KAAK,EAAE,EADyB;AAEhCC,EAAAA,UAAU,EAAE,KAFoB;AAGhCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHY;AAIhCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJgB,CAAD,CAAjC;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AAEA,QAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;AAEA,SAAOI,iBAAP;AACD,CAPD;;AASA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,QAAMC,oBAAoB,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA7B;AACD,CAHD;;AAKA,OAAO,MAAME,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAMC,YAAY,GAAGL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAM,CAACd,KAAD,EAAQmB,QAAR,IAAoBtB,QAAQ,CAACqB,YAAD,CAAlC;AAEA,QAAME,cAAc,GAAG,CAAC,CAACpB,KAAzB,CAJmD,CAInB;;AAEhC,QAAMqB,aAAa,GAAG,MAAM;AAC1BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAN,IAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB,EAAiCtB,KAAjC;;AAEA,QAAIF,WAAJ,EAAiB;AACfyB,MAAAA,YAAY,CAACzB,WAAD,CAAZ;AACD;AACF,GAPD;;AASA,QAAM0B,YAAY,GAAG,CAACxB,KAAD,EAAQK,cAAR,KAA2B;AAC9Cc,IAAAA,QAAQ,CAACnB,KAAD,CAAR;AACAa,IAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8BzB,KAA9B;AACAa,IAAAA,YAAY,CAACY,OAAb,CAAqB,gBAArB,EAAuCpB,cAAvC;AAEA,UAAMqB,aAAa,GAAGtB,sBAAsB,CAACC,cAAD,CAA5C;AAEAP,IAAAA,WAAW,GAAG6B,UAAU,CAACN,aAAD,EAAgBK,aAAhB,CAAxB;AACD,GARD;;AAUA,QAAME,YAAY,GAAG;AACnB5B,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEmB,cAFO;AAGnBlB,IAAAA,KAAK,EAAEsB,YAHY;AAInBrB,IAAAA,MAAM,EAAEkB;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEO,YAA7B;AAAA,cAA4CX;AAA5C;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAnCM;;GAAMD,mB;;KAAAA,mB;AAqCb,eAAejB,WAAf","sourcesContent":["import { createContext, useState } from \"react\";\n\nlet logoutTimer;\n\nconst AuthContext = createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n\n  return remainingDuration;\n};\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n};\n\nexport const AuthContextProvider = ({ children }) => {\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token; // !! (not not) --> converts a falsey value to a true one\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\", token);\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}