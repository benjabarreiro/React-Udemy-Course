{"ast":null,"code":"var _jsxFileName = \"/Users/benjabarreiro/Documents/Notas-CursoReact/authentication-react/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; // !! (not not) --> converts a falsey value to a true one\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\", token);\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/benjabarreiro/Documents/Notas-CursoReact/authentication-react/src/store/auth-context.js"],"names":["createContext","useState","AuthContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","AuthContextProvider","children","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","removeItem","loginHandler","setItem","remainingTime","setTimeout","contextValue"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,gBAAGF,aAAa,CAAC;AAChCG,EAAAA,KAAK,EAAE,EADyB;AAEhCC,EAAAA,UAAU,EAAE,KAFoB;AAGhCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHY;AAIhCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJgB,CAAD,CAAjC;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AAEA,QAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;AAEA,SAAOI,iBAAP;AACD,CAPD;;AASA,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoBlB,QAAQ,CAACe,YAAD,CAAlC;AAEA,QAAMI,cAAc,GAAG,CAAC,CAACjB,KAAzB,CAJmD,CAInB;;AAEhC,QAAMkB,aAAa,GAAG,MAAM;AAC1BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB,EAAiCnB,KAAjC;AACD,GAHD;;AAKA,QAAMoB,YAAY,GAAG,CAACpB,KAAD,EAAQK,cAAR,KAA2B;AAC9CW,IAAAA,QAAQ,CAAChB,KAAD,CAAR;AACAc,IAAAA,YAAY,CAACO,OAAb,CAAqB,OAArB,EAA8BrB,KAA9B;AAEA,UAAMsB,aAAa,GAAGlB,sBAAsB,CAACC,cAAD,CAA5C;AAEAkB,IAAAA,UAAU,CAACL,aAAD,EAAgBI,aAAhB,CAAV;AACD,GAPD;;AASA,QAAME,YAAY,GAAG;AACnBxB,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEgB,cAFO;AAGnBf,IAAAA,KAAK,EAAEkB,YAHY;AAInBjB,IAAAA,MAAM,EAAEe;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEM,YAA7B;AAAA,cAA4CZ;AAA5C;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CA9BM;;GAAMD,mB;;KAAAA,mB;AAgCb,eAAeZ,WAAf","sourcesContent":["import { createContext, useState } from \"react\";\n\nconst AuthContext = createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n\n  return remainingDuration;\n};\n\nexport const AuthContextProvider = ({ children }) => {\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token; // !! (not not) --> converts a falsey value to a true one\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\", token);\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}